


Ref doc: https://oracle-base.com/articles/linux/awx-installation-on-ol7-using-the-docker-compose-method#:~:text=Install%20AWX,Ansible%2C%20PIP%20and%20Git%20packages.&text=Make%20sure%20the%20Python%20libraries,for%20Docker%20and%20Docker%2DCompose.&text=Clone%20the%20AWX%20repository%20and%20switch%20to%20the%20installer%20directory.&text=Amend%20the%20contents%20of%20the,file%20as%20you%20see%20fit.
AWX Installation on Oracle Linux 7 (OL7) Using the Docker-Compose Method
Assumptions
      You have a clean installation of Oracle Linux 7.
      You have at least one spare disk (real or virtual) to act as the "/var/lib/docker" mount point using BTRFS.
      You have a location called "/u01", which is either on a separate disk, or under the "/" mount point. Preferable not the latter.
      All actions performed as the "root" user.
    
INSTALL PYTHON3:
      Ref: https://yum.oracle.com/oracle-linux-python.html
	sudo yum install -y oracle-epel-release-el7 oracle-release-el7
	sudo yum install -y python3
	sudo yum update -y

Install Docker
      The installation of Docker on Oracle Linux is described in full here. To keep things simple I've abbreviated it here. Some of these actions are destructive, so if in doubt read the related article.
      INSTALL DOCKER:
		yum install -y yum-utils zip unzip
		yum-config-manager --enable ol7_optional_latest
		yum-config-manager --enable ol7_addons

		yum install -y oraclelinux-developer-release-el7
		yum install -y docker-engine btrfs-progs btrfs-progs-devel
      
INSTALL YUM REPO:
      Make sure the relevant repositories are enabled.
            yum install yum-utils zip unzip -y
            yum-config-manager --enable ol7_optional_latest
            yum-config-manager --enable ol7_addons
            yum-config-manager --enable ol7_preview
            yum-config-manager --enable ol7_developer
            yum-config-manager --enable ol7_developer_EPEL
      
       NOTE: (any of the above repo is missing)
              sudo wget http://yum.oracle.com/public-yum-ol7.repo

# Enable the Docker service.
      systemctl enable docker.service
      systemctl start docker.service
      systemctl status docker.service
      
      
Install AWX
Install the required Ansible, PIP and Git packages.
      sudo yum install -y ansible python-pip python-devel python3-devel git gcc
      
 Make sure the Python libraries are present for Docker and Docker-Compose.
      sudo pip3 install --upgrade pip
      sudo pip3 install docker
      sudo pip3 install docker-compose
     
 Clone the AWX repository and switch to the installer directory.
      sudo mkdir /u01
      cd /u01/
      sudo git clone https://github.com/ansible/awx.git
      cd awx/installer
     
  You are now in a position to install AWX. Issue the following command to run the installation playbook.
      ansible-playbook -i inventory install.yml
      
    NOTE: Before installing, you can check Amend the contents of the "./inventory" file as you see fit. It includes an assortment of paths and credentials. You could do the run without amending any of these and it will work, but for anything other than a playground it's worth making some changes. Here are some of the obvious things you may want to change.
    You can customize the values in inventory as per need.
    Using sed command you cna do it:
        sed -i -e "s|awx_task_hostname=awx|awx_task_hostname=${AWX_TASK_HOSTNAME}|g" ./inventory
        sed -i -e "s|awx_web_hostname=awxweb|awx_web_hostname=${AWX_WEB_HOSTNAME}|g" ./inventory
        sed -i -e "s|postgres_data_dir=\"~/.awx/pgdocker\"|postgres_data_dir=${POSTGRES_DATA_DIR}|g" ./inventory
        sed -i -e "s|host_port=80|host_port=${HOST_PORT}|g" ./inventory
        sed -i -e "s|host_port_ssl=443|host_port_ssl=${HOST_PORT_SSL}|g" ./inventory
        sed -i -e "s|docker_compose_dir=\"~/.awx/awxcompose\"|docker_compose_dir=${DOCKER_COMPOSE_DIR}|g" ./inventory
        sed -i -e "s|pg_username=awx|pg_username=${PG_USERNAME}|g" ./inventory
        sed -i -e "s|pg_password=awxpass|pg_password=${PG_PASSWORD}|g" ./inventory
        sed -i -e "s|pg_database=awx|pg_database=${PG_DATABASE}|g" ./inventory
        sed -i -e "s|pg_port=5432|pg_port=${PG_PORT}|g" ./inventory
        sed -i -e "s|rabbitmq_password=awxpass|rabbitmq_password=${RABBITMQ_PASSWORD}|g" ./inventory
        sed -i -e "s|admin_user=admin|admin_user=${ADMIN_USER}|g" ./inventory
        sed -i -e "s|admin_password=password|admin_password=${ADMIN_PASSWORD}|g" ./inventory
        sed -i -e "s|secret_key=awxsecret|secret_key=${SECRET_KEY}|g" ./inventory
        sed -i -e "s|#project_data_dir=/var/lib/awx/projects|project_data_dir=${PROJECT_DATA_DIR}|g" ./inventory
        
    Troubleshooting:
        Error: "Aborting, target uses selinux but python bindings (libselinux-python) aren't installed!"} in python3
    
        Solution: sudo pip3 install selinux
        or
        yum install libselinux-python
        
        Error:
        atal: [localhost]: FAILED! => {"changed": false, "msg": "Failed to import the required Python library (Docker SDK for Python: docker (Python >= 2.7) or docker-py (Python 2.6)) on RS2's Python /bin/python3. Please read module documentation and install in the appropriate location. If the required library is installed, but Ansible is using the wrong Python interpreter, please consult the documentation on ansible_python_interpreter, for example via `pip install docker` or `pip install docker-py` (Python 2.6). The error was: No module named 'requests'"}
        
        pip3 install docker
        pip3 install docker-compose
        
     Once done you will have the following containers running:
           [root@localhost installer]# docker ps
            CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                  NAMES
            328724ef6152        ansible/awx:12.0.0   "tini -- /usr/bin/la…"   34 seconds ago      Up 28 seconds       8052/tcp               awx_task
            d470ac850fa6        ansible/awx:12.0.0   "tini -- /bin/sh -c …"   36 seconds ago      Up 28 seconds       0.0.0.0:80->8052/tcp   awx_web
            32a81b62b3c8        postgres:10          "docker-entrypoint.s…"   37 seconds ago      Up 18 seconds       5432/tcp               awx_postgres
            139fcf232dc6        redis                "docker-entrypoint.s…"   37 seconds ago      Up 28 seconds       6379/tcp               awx_redis
            [root@localhost installer]# 
            
     
     Once the installation is complete, you should have a running AWX environment. The web interface is available from the following URLs by default.

            http://localhost:80
            http://localhost:443
      After AWX is installed, you can log in with the default username admin and password password.
      
      the inventory file in /opt/awx/installer has this line:

      #This will create or update a default admin (superuser) account in AWX, if not provided
      #then these default values are used
      admin_user=admin
      admin_password=password
      You can change the password and re-ran install.yml. It will apply the new password.

UPDATE project_data_dir:

[root@rs0-ansible-host installer]# cat inventory | grep 'project_data_dir'
project_data_dir=/var/lib/awx/projects  #uncommented in inventory and then restarted docker images as below

#AWX
sudo docker pause awx_task
sudo docker stop awx_task
sudo docker restart awx_task

#AWX-Web
sudo docker pause awx_web
sudo docker stop awx_web
sudo docker restart awx_web

#AWX-RabbitMQ
sudo docker pause awx_rabbitmq
sudo docker stop awx_rabbitmq
sudo docker restart awx_rabbitmq

#AWX-PostgreSQL
sudo docker pause awx_postgres
sudo docker stop awx_postgres
sudo docker restart awx_postgres

#AWX-Memcached
sudo docker pause awx_memcached
sudo docker stop awx_memcached
sudo docker restart awx_memcached

https://www.unixarena.com/2019/03/ansible-tower-awx-creating-scm-git-project-in-ansible.html/
https://www.unixarena.com/2018/11/ansible-tower-awx-how-to-create-manual-scm-project.html/
https://www.unixarena.com/2018/10/ansible-how-to-install-and-configure-awx.html/
